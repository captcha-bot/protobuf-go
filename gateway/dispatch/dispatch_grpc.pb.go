// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dispatch

import (
	context "context"
	model "github.com/captcha-bot/protobuf-go/discord/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayDispatchClient is the client API for GatewayDispatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayDispatchClient interface {
	MessageCreate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GatewayDispatch_MessageCreateClient, error)
}

type gatewayDispatchClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayDispatchClient(cc grpc.ClientConnInterface) GatewayDispatchClient {
	return &gatewayDispatchClient{cc}
}

func (c *gatewayDispatchClient) MessageCreate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GatewayDispatch_MessageCreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayDispatch_ServiceDesc.Streams[0], "/captcha.gateway.dispatch.GatewayDispatch/MessageCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayDispatchMessageCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayDispatch_MessageCreateClient interface {
	Recv() (*model.MessageData, error)
	grpc.ClientStream
}

type gatewayDispatchMessageCreateClient struct {
	grpc.ClientStream
}

func (x *gatewayDispatchMessageCreateClient) Recv() (*model.MessageData, error) {
	m := new(model.MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayDispatchServer is the server API for GatewayDispatch service.
// All implementations must embed UnimplementedGatewayDispatchServer
// for forward compatibility
type GatewayDispatchServer interface {
	MessageCreate(*emptypb.Empty, GatewayDispatch_MessageCreateServer) error
	mustEmbedUnimplementedGatewayDispatchServer()
}

// UnimplementedGatewayDispatchServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayDispatchServer struct {
}

func (UnimplementedGatewayDispatchServer) MessageCreate(*emptypb.Empty, GatewayDispatch_MessageCreateServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) mustEmbedUnimplementedGatewayDispatchServer() {}

// UnsafeGatewayDispatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayDispatchServer will
// result in compilation errors.
type UnsafeGatewayDispatchServer interface {
	mustEmbedUnimplementedGatewayDispatchServer()
}

func RegisterGatewayDispatchServer(s grpc.ServiceRegistrar, srv GatewayDispatchServer) {
	s.RegisterService(&GatewayDispatch_ServiceDesc, srv)
}

func _GatewayDispatch_MessageCreate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayDispatchServer).MessageCreate(m, &gatewayDispatchMessageCreateServer{stream})
}

type GatewayDispatch_MessageCreateServer interface {
	Send(*model.MessageData) error
	grpc.ServerStream
}

type gatewayDispatchMessageCreateServer struct {
	grpc.ServerStream
}

func (x *gatewayDispatchMessageCreateServer) Send(m *model.MessageData) error {
	return x.ServerStream.SendMsg(m)
}

// GatewayDispatch_ServiceDesc is the grpc.ServiceDesc for GatewayDispatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayDispatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "captcha.gateway.dispatch.GatewayDispatch",
	HandlerType: (*GatewayDispatchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageCreate",
			Handler:       _GatewayDispatch_MessageCreate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/dispatch.proto",
}
